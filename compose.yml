services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-root} -d ${POSTGRES_DB:-postgres}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build: .
    restart: always
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      OAUTH_AUTH0_CLIENT_ID: ${OAUTH_AUTH0_CLIENT_ID}
      OAUTH_AUTH0_CLIENT_SECRET: ${OAUTH_AUTH0_CLIENT_SECRET}
      OAUTH_AUTH0_DOMAIN: ${OAUTH_AUTH0_DOMAIN}

      CHAINLIT_AUTH_SECRET: ${CHAINLIT_AUTH_SECRET}
      OLLAMA_MODEL: ${OLLAMA_MODEL}
      OLLAMA_API_KEY: ${OLLAMA_API_KEY}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL}

      GROQ_API_KEY: ${GROQ_API_KEY}
      GROQ_BASE_URL: ${GROQ_BASE_URL}
      GROQ_MODEL: ${GROQ_MODEL}
      GROQ_WHISPER_MODEL: ${GROQ_WHISPER_MODEL}

      BUCKET_NAME: ${BUCKET_NAME}
      APP_AWS_ACCESS_KEY: ${APP_AWS_ACCESS_KEY}
      APP_AWS_SECRET_KEY: ${APP_AWS_SECRET_KEY}
      APP_AWS_REGION: ${APP_AWS_REGION}
      DEV_AWS_ENDPOINT: ${DEV_AWS_ENDPOINT}

    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "
        echo 'Waiting for DB to be ready...' &&
        bunx prisma migrate deploy &&
        echo 'Starting Chainlit...' &&
        uv run chainlit run frontend/main.py -w --host 0.0.0.0 --port 8000
      "

volumes:
  postgres_data:
